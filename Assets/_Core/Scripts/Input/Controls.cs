//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/_Core/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""eab6b54a-5e64-4597-a235-1ff9e303f92c"",
            ""actions"": [
                {
                    ""name"": ""RoolAgain"",
                    ""type"": ""Button"",
                    ""id"": ""c15fc005-decf-4667-bbd5-70062fe1c86a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmRoll"",
                    ""type"": ""Button"",
                    ""id"": ""eb88f3bf-90a1-4a1f-a1af-886f1573711c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""fa5c7098-c7cd-4bf7-be24-6e8660e5e6ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1b8a2f5-6cb3-401f-8280-8f80f19fffb7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RoolAgain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb5ef859-a8b6-4362-9e5f-f82fb397041f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f6929de-0b6e-40ad-864e-64ed38ec6684"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_RoolAgain = m_PlayerAction.FindAction("RoolAgain", throwIfNotFound: true);
        m_PlayerAction_ConfirmRoll = m_PlayerAction.FindAction("ConfirmRoll", throwIfNotFound: true);
        m_PlayerAction_Interact = m_PlayerAction.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private List<IPlayerActionActions> m_PlayerActionActionsCallbackInterfaces = new List<IPlayerActionActions>();
    private readonly InputAction m_PlayerAction_RoolAgain;
    private readonly InputAction m_PlayerAction_ConfirmRoll;
    private readonly InputAction m_PlayerAction_Interact;
    public struct PlayerActionActions
    {
        private @Controls m_Wrapper;
        public PlayerActionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RoolAgain => m_Wrapper.m_PlayerAction_RoolAgain;
        public InputAction @ConfirmRoll => m_Wrapper.m_PlayerAction_ConfirmRoll;
        public InputAction @Interact => m_Wrapper.m_PlayerAction_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Add(instance);
            @RoolAgain.started += instance.OnRoolAgain;
            @RoolAgain.performed += instance.OnRoolAgain;
            @RoolAgain.canceled += instance.OnRoolAgain;
            @ConfirmRoll.started += instance.OnConfirmRoll;
            @ConfirmRoll.performed += instance.OnConfirmRoll;
            @ConfirmRoll.canceled += instance.OnConfirmRoll;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IPlayerActionActions instance)
        {
            @RoolAgain.started -= instance.OnRoolAgain;
            @RoolAgain.performed -= instance.OnRoolAgain;
            @RoolAgain.canceled -= instance.OnRoolAgain;
            @ConfirmRoll.started -= instance.OnConfirmRoll;
            @ConfirmRoll.performed -= instance.OnConfirmRoll;
            @ConfirmRoll.canceled -= instance.OnConfirmRoll;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);
    public interface IPlayerActionActions
    {
        void OnRoolAgain(InputAction.CallbackContext context);
        void OnConfirmRoll(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
